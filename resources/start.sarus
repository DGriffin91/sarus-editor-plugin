struct ProcessState {
    some_number: f32,
}

fn init_process_state(state: ProcessState) -> () {
    state = ProcessState {
        some_number: 0.0,
    }
}

fn process(params: SarusDSPModelParams, audio: AudioData, 
           state: ProcessState, dbg: Debugger) -> () {
    i = 0
    left = audio.in_left
    right = audio.in_right

    while i < audio.len {
        gain = params.p1[i].from_normalized(-24.0, 24.0, 1.0).db_to_lin()
        audio.out_left[i] = left[i] * gain
        audio.out_right[i] = right[i] * gain
        dbg.show(0, audio.out_left[i])
        dbg.show(1, gain)
        i += 1
    }
}

struct EditorState {}

fn init_editor_state(state: EditorState) -> () {
    state = EditorState {}
}

fn editor(ui: Ui, params: SarusUIModelParams, state: EditorState) -> () {
    ui.label("I'm a label!")
    params.p1 = ui.slider_normalized("Gain", params.p1, -24.0, 24.0, 1.0)
}